

REACT_APP_SERVER_URL=http://localhost:3000
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
import Router from './routers/AppRouter';

function App() {
  return (
    <Router />
  );
}

export default App;
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  
}

.container {
  background: white;
  padding: 2rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  width: 300px;
}

h1,
h2 {
  text-align: center;
  color: #333;
}

form {
  display: flex;
  flex-direction: column;
  margin: 2rem auto;
}

label {
  margin-bottom: 0.5rem;
  color: #555;
}

input[type="text"],
input[type="password"],
input[type="date"],
input[type="number"] {
  padding: 0.5rem;
  margin-bottom: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  padding: 0.5rem;
  background: #28a745;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background: #218838;
}

.error {
  color: red;
  text-align: center;
  margin-bottom: 1rem;
}

.success {
  color: green;
  text-align: center;
  margin-bottom: 1rem;
}

.nav-menu {
  margin-top: 1rem;
  display: flex;
  justify-content: center;
  gap: 1rem;
}

.nav-menu button {
  padding: 0.5rem 1rem;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.nav-menu button:hover {
  background: #0056b3;
}

#content-area {
  margin-top: 2rem;
}import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
// src/AppRouter.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import AddStudentForm from '../components/AddStudentForm';
import StudentsList from '../components/StudentsList';
import RegisterForm from '../components/RegisterForm';
import LoginForm from '../components/LoginForm';
import Logout from '../components/Logout';
// crear y adaptar import { getCookie } from '../utils/cookie';

 function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }
const AppRouter = () => {

 const token = getCookie('access_token');
  return (
    <Router>
      <Routes>
        <Route path="/add-student" element={<AddStudentForm />} />
        <Route path="/students" element={<StudentsList />} />
        <Route path="/register" element={<RegisterForm />} />
        <Route path="/login" element={<LoginForm />} />
        <Route path="/logout" element={<Logout />} />
        {/* Ruta por defecto */}
        <Route path="/" element={token ? <StudentsList /> : <LoginForm />} />

       
        {/* Ruta 404 */}
        <Route path="*" element={<h1>404: Página no encontrada</h1>} />
      </Routes>
    </Router>
  );
};

export default AppRouter;
import React, { useState } from 'react';

const AddStudentForm = () => {
  const [studentData, setStudentData] = useState({
    name: '',
    dni: '',
    birth_date: '',
    address: '',
    contact_name: '',
    contact_relationship: '',
    contact_phone: '',
    turn: '',
    classRoom: '',
    teacherId: '',
  });
  const [message, setMessage] = useState('');

  const handleChange = (e) => {
    const { id, value } = e.target;
    setStudentData((prevData) => ({ ...prevData, [id]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/students', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(studentData),
      });
      
      const data = await response.json();
      if (response.ok) {
        setMessage('Alumno añadido con éxito');
      } else {
        setMessage(data.error);
      }
    } catch (error) {
      console.error('Error:', error);
      setMessage('Error al añadir el alumno');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <label htmlFor="student-name">Nombre:</label>
      <input type="text" id="student-name" value={studentData.name} onChange={handleChange} required />
      <label htmlFor="student-dni">DNI:</label>
      <input type="number" id="student-dni" value={studentData.dni} onChange={handleChange} required />
      <label htmlFor="student-birth-date">Fecha de Nacimiento:</label>
      <input type="date" id="student-birth-date" value={studentData.birth_date} onChange={handleChange} required />
      <label htmlFor="student-address">Dirección:</label>
      <input type="text" id="student-address" value={studentData.address} onChange={handleChange} required />
      <label htmlFor="student-contact-name">Nombre del Contacto:</label>
      <input type="text" id="student-contact-name" value={studentData.contact_name} onChange={handleChange} required />
      <label htmlFor="student-contact-relationship">Relación del Contacto:</label>
      <input type="text" id="student-contact-relationship" value={studentData.contact_relationship} onChange={handleChange} required />
      <label htmlFor="student-contact-phone">Teléfono del Contacto:</label>
      <input type="text" id="student-contact-phone" value={studentData.contact_phone} onChange={handleChange} required />
      <label htmlFor="student-turn">Turno:</label>
      <select id="student-turn" value={studentData.turn} onChange={handleChange} required>
        <option value="morning">Mañana</option>
        <option value="afternoon">Tarde</option>
      </select>
      <label htmlFor="student-classroom">Aula:</label>
      <input type="text" id="student-classroom" value={studentData.classRoom} onChange={handleChange} required />
      <label htmlFor="student-teacher-id">ID del Profesor:</label>
      <input type="text" id="student-teacher-id" value={studentData.teacherId} onChange={handleChange} required />
      <button type="submit">Añadir</button>
      {message && <div className={response.ok ? "success" : "error"}>{message}</div>}
    </form>
  );
};

export default AddStudentForm;
import React, { useEffect, useState } from 'react';

const ChildrenList = () => {
  const [children, setChildren] = useState([]);

  useEffect(() => {
    const fetchChildren = async () => {
      try {
        const response = await fetch('/mis-hijos');
        const data = await response.json();
        if (response.ok) {
          setChildren(data);
        } else {
          console.error('Failed to fetch children');
        }
      } catch (error) {
        console.error('Error:', error);
      }
    };

    fetchChildren();
  }, []);

  return (
    <div>
      <h2>Mis Hijos</h2>
      <ul>
        {children.map((child) => (
          <li key={child.id}>{child.name} - {child.classRoom}</li>
        ))}
      </ul>
    </div>
  );
};

export default ChildrenList;
import React from 'react';

const Navbar = ({ user, onLogout, onViewStudents, onAddStudent, onViewChildren }) => (
  <div className="nav-menu">
    {['directora', 'vicedirectora', 'preceptora', 'maestra'].includes(user.role) && (
      <button onClick={onViewStudents}>Ver Alumnos</button>
    )}
    {user.role === 'preceptora' && <button onClick={onAddStudent}>Añadir Alumno</button>}
    {user.role === 'padre' && <button onClick={onViewChildren}>Ver Mis Hijos</button>}
    <button onClick={onLogout}>Cerrar sesión</button>
  </div>
);

export default Navbar;
function logout() {
    document.cookie = 'access_token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    // Redirigir al usuario a la página de login
    if (window.location.pathname !== '/login')

    window.location.href = '/login';
}

    export default function Logout() {
        return (
        <button onClick={logout}>Cerrar sesión</button>
        );
    }   

import React, { useEffect, useState } from 'react';

function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

const token = getCookie('access_token');

const StudentsList = () => {
  const [students, setStudents] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchStudents = async () => {
      try {
        const response = await fetch('http://localhost:3000/students', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
          setStudents(data);
        } else {
          const errorData = await response.json();
          setError(errorData.error || 'Error al obtener los estudiantes');
        }
      } catch (error) {
        console.error('Error:', error);
        setError('Error al obtener los estudiantes');
      }
    };

    fetchStudents();
  }, []);

  return (
    <div>
      <h1>Lista de estudiantes</h1>
      {error && <p>{error}</p>}
      <ul>
        {students.map((student) => (
          <li key={student._id}>
            <p>{student.name}</p>
            <p>{student.dni}</p>
            <p>{student.birth_date}</p>
            <p>{student.address}</p>
            <p>{student.turn}</p>
            <p>{student.classRoom}</p>
            <p>{student.teacherId}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default StudentsList;import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const RegisterForm = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [role, setRole] = useState('');
  const [message, setMessage] = useState('');
  const [isSuccess, setIsSuccess] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage('');
    setIsSuccess(false);

    try {
      const response = await fetch('http://localhost:3000/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password, role }),
      });

      const data = await response.json();

      if (response.ok) {
        setIsSuccess(true);
        setMessage('Usuario registrado con éxito');
        setUsername('');
        setPassword('');
        setRole('');
        // Opcionalmente, redirigir al usuario después de un registro exitoso
        setTimeout(() => navigate('/login'), 2000);
      } else {
        setMessage(data.error || 'Error al registrar usuario');
      }
    } catch (error) {
      console.error('Error:', error);
      setMessage('Error de conexión. Por favor, intente más tarde.');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <label htmlFor="reg-username">Usuario:</label>
      <input
        type="text"
        id="reg-username"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        required
      />
      <label htmlFor="reg-password">Contraseña:</label>
      <input
        type="password"
        id="reg-password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      <label htmlFor="reg-role">Rol:</label>
      <select
        id="reg-role"
        value={role}
        onChange={(e) => setRole(e.target.value)}
        required
      >
        <option value="">Seleccione un rol</option>
        <option value="admin">Admin</option>
        <option value="directora">Directora</option>
        <option value="vicedirectora">Vicedirectora</option>
        <option value="preceptora">Preceptora</option>
        <option value="maestra">Maestra</option>
        <option value="padre">Padre</option>
      </select>
      <button type="submit">Registrar</button>
      {message && (
        <div className={isSuccess ? "success" : "error"}>{message}</div>
      )}
    </form>
  );
};

export default RegisterForm;import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'

const URL = 'http://localhost:3000/login'

const LoginForm = () => {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [message, setMessage] = useState('')
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      const response = await fetch(URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      })

      if (response.ok) {
        const data = await response.json
        //const data = JSON.parse(text)()
        document.cookie = `access_token=${data.token}; path=/; max-age=3600; Secure; SameSite=Strict`
        // window.location.reload()
        navigate('/students')
      } else {
        const errorData = await response.json()
        setMessage(errorData.error || 'Error en el inicio de sesión')
      
      }
    } catch (error) {
      console.error('Error:', error)
      setMessage('Error al iniciar sesión')
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <label htmlFor="username">Usuario:</label>
      <input
        type="text"
        id="username"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        required
      />
      <label htmlFor="password">Contraseña:</label>
      <input
        type="password"
        id="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />

      <button type="submit">Iniciar sesión</button>
      {message && <div className="error">{message}</div>}
    </form>
  )
}

export default LoginForm
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  },
)
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>{
  "name": "jz-admin-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.24.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}
